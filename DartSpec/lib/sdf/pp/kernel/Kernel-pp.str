module lib/sdf/pp/kernel/Kernel-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  libstratego-sglr
  lib/sdf/signatures/kernel/Kernel-sig


imports
  lib/sdf/signatures/aterms/Aterms-sig
  lib/sdf/signatures/symbols/Symbols-sig
  lib/sdf/signatures/grammar/Grammars-sig
  lib/sdf/signatures/constants/StrCon-sig


imports
  lib/sdf/pp/aterms/Aterms-pp
  lib/sdf/pp/symbols/Symbols-pp
  lib/sdf/pp/grammar/Grammars-pp
  lib/sdf/pp/constants/StrCon-pp


strategies
  prettyprint-example =
    prettyprint-ATermAttribute

  prettyprint-example =
    prettyprint-Attributes

  prettyprint-example =
    prettyprint-Attribute

  prettyprint-example =
    prettyprint-QuotedConstructor

  prettyprint-example =
    prettyprint-Production

  prettyprint-example =
    prettyprint-Productions

  prettyprint-example =
    prettyprint-Grammar

  prettyprint-ATermAttribute :
    Default(aterm__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [aterm__']
                          )
                        ]
    with aterm__' := <pp-one-Z(prettyprint-ATerm)> aterm__

  is-ATermAttribute =
    ?Default(_)

  prettyprint-Attribute :
    Term(t1__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [t1__']
                    )
                  ]
    with t1__' := <pp-one-Z(prettyprint-ATermAttribute)> t1__

  is-Attribute =
    ?Term(_)

  prettyprint-Attributes :
    Attrs(list__) -> [ H(
                         [SOpt(HS(), "0")]
                       , [ S("{")
                         , list__'
                         , S("}")
                         ]
                       )
                     ]
    with list__' := <pp-H-list(prettyprint-Attribute|", ")> list__

  is-Attributes =
    ?Attrs(_)

  prettyprint-Attributes :
    NoAttrs() -> [ H(
                     []
                   , [S("")]
                   )
                 ]

  is-Attributes =
    ?NoAttrs()

  prettyprint-Attribute :
    Deprecated() -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("deprecated")]
                      )
                    ]

  is-Attribute =
    ?Deprecated()

  prettyprint-Attribute :
    Deprecated(t1__) -> [ H(
                            [SOpt(HS(), "0")]
                          , [ S("deprecated(")
                            , t1__'
                            , S(")")
                            ]
                          )
                        ]
    with t1__' := <pp-one-Z(prettyprint-StrCon)> t1__

  is-Attribute =
    ?Deprecated(_)

  prettyprint-Attribute :
    Constructor(t1__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [ S("cons(")
                             , t1__'
                             , S(")")
                             ]
                           )
                         ]
    with t1__' := <pp-one-Z(prettyprint-StrCon)> t1__

  is-Attribute =
    ?Constructor(_)

  prettyprint-Attribute :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Attribute)
    where t1__' := <pp-one-Z(prettyprint-QuotedConstructor)> t1__

  prettyprint-Attribute :
    CaseInsensitive() -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("case-insensitive")]
                           )
                         ]

  is-Attribute =
    ?CaseInsensitive()

  prettyprint-QuotedConstructor :
    Constructor(t1__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [t1__']
                           )
                         ]
    with t1__' := <pp-one-Z(prettyprint-StrCon)> t1__

  is-QuotedConstructor =
    ?Constructor(_)

  prettyprint-Production :
    Prod(t1__, result__, t2__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [ t1__'
                                      , S(" -> ")
                                      , result__'
                                      , S(" ")
                                      , t2__'
                                      ]
                                    )
                                  ]
    with t1__' := <pp-one-Z(prettyprint-Symbols)> t1__
    with result__' := <pp-one-Z(prettyprint-Symbol)> result__
    with t2__' := <pp-one-Z(prettyprint-Attributes)> t2__

  is-Production =
    ?Prod(_, _, _)

  prettyprint-Productions :
    list__ -> [ H(
                  [SOpt(HS(), "0")]
                , [list__']
                )
              ]
    where not(is-Productions)
    where list__' := <pp-V-list(prettyprint-Production)> list__

  prettyprint-Grammar :
    Syntax(t1__) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("syntax")]
                      )
                    , H(
                        []
                      , [S("")]
                      )
                    , t1__'
                    , H(
                        []
                      , [S("")]
                      )
                    ]
    with t1__' := <pp-indent(|"2")> [<pp-one-Z(prettyprint-Productions)> t1__]

  is-Grammar =
    ?Syntax(_)

  is-ATermAttribute =
    fail

  is-Attributes =
    fail

  is-Attribute =
    fail

  is-QuotedConstructor =
    fail

  is-Production =
    fail

  is-Productions =
    fail

  is-Grammar =
    fail

  prettyprint-ATermAttribute :
    amb([h|hs]) -> <prettyprint-ATermAttribute> h

  prettyprint-Attributes :
    amb([h|hs]) -> <prettyprint-Attributes> h

  prettyprint-Attribute :
    amb([h|hs]) -> <prettyprint-Attribute> h

  prettyprint-QuotedConstructor :
    amb([h|hs]) -> <prettyprint-QuotedConstructor> h

  prettyprint-Production :
    amb([h|hs]) -> <prettyprint-Production> h

  prettyprint-Productions :
    amb([h|hs]) -> <prettyprint-Productions> h

  prettyprint-Grammar :
    amb([h|hs]) -> <prettyprint-Grammar> h
