module kernel/Kernel
imports aterms/Aterms symbols/Symbols grammar/Grammars constants/StrCon

exports
  context-free syntax
    aterm:ATerm                           -> ATermAttribute    {cons("Default")}
    ATermAttribute                        -> Attribute         {cons("Term")}
    "{" list:{Attribute ","}* "}"         -> Attributes        {cons("Attrs")}
                                          -> Attributes        {cons("NoAttrs")}
    "deprecated"                          -> Attribute         {cons("Deprecated"), prefer}
    "deprecated" "(" StrCon ")"           -> Attribute         {cons("Deprecated"), prefer}
    "cons" "(" StrCon ")"                 -> Attribute         {cons("Constructor"), prefer, deprecated("Use 'Sort.Cons' notation instead")}
    QuotedConstructor                     -> Attribute         {prefer, deprecated("Use 'Sort.Cons' notation instead")}
    "case-insensitive"                    -> Attribute         {cons("CaseInsensitive"), prefer}
    StrCon                                -> QuotedConstructor {cons("Constructor")}
    Symbols "->" result:Symbol Attributes -> Production        {cons("Prod"), deprecated("Use productive form instead")}
    list:Production*                      -> Productions       
    "syntax" Productions                  -> Grammar           {cons("Syntax")}

  context-free syntax
    CONTENTCOMPLETE -> ATermAttribute    {cons("COMPLETION-ATermAttribute")}
    CONTENTCOMPLETE -> Attributes        {cons("COMPLETION-Attributes")}
    CONTENTCOMPLETE -> Attribute         {cons("COMPLETION-Attribute")}
    CONTENTCOMPLETE -> QuotedConstructor {cons("COMPLETION-QuotedConstructor")}
    CONTENTCOMPLETE -> Production        {cons("COMPLETION-Production")}
    CONTENTCOMPLETE -> Productions       {cons("COMPLETION-Productions")}
    CONTENTCOMPLETE -> Grammar           {cons("COMPLETION-Grammar")}
