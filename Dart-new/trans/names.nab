module names

namespaces
  
  Global Label File

binding rules // Top level "stuff"
  
  File(name, _):
    defines File name
    scopes Global
  
  Import(String(name), _):
    imports Global from File name

  Typealias(_, t, name, _, p*):
    scopes Global
    defines Global name
    of type (p*, t)
  
  TypeParameter(_, name):
    defines Global name
  
binding rules // Classes

  Class(_, _, name, _, None(), _, _, _):
    scopes Global
    defines Global name
    of type Type(name)
    
  Class(_, _, name, _, Parent(Type(parent)), _, _, _):
    scopes Global
    defines Global name
    of type Type(name)
    imports Global, imported Global from Global parent
  
binding rules // Fields

  FieldDeclaration(_, t, name):
    defines Global name
    of type t
  
  Field(exp, name):
    refers to Global name in Global e
    where exp has type Type(e)

binding rules // Method

  Method(_, FunctionSignature(_, t, name, _), _):
    scopes Global
  	defines Global name
  	of type t
  
binding rules // Functions

  Function(_, t, name, p*, _, _):
    scopes Global
    defines Global name
    of type (p*, t)
    
  ShortFunction(_, t, name, p*, _, _):
    scopes Global
    defines Global name
    of type (p*, t)
  
binding rules // Parameters

  SimpleParameter(_, _, t, name):
    defines Global name
    of type Type(t)
  
  SimpleParameter(_, name):
    defines Global name
  
binding rules // Statements

  VarDecl(_, _, t, Var(name, exp)):
    defines Global name

  VarDecl(_, t, Var(name, exp)):
    defines Global name
      // of type t  (temporary disabled)
      // in subsequent scope (@see NaBL#48)
    //where exp has type e (temporary disabled)
    //and e == t (temporary disabled)
  
  VarDecl(_, t, Var(name)):
    defines Global name
      // of type t (temporary disabled)
      // in subsequent scope (@see NaBL#48)
  
  VarDecl(_, Var(name, exp)):
    defines Global name
      // of type t (temporary disabled)
      // in subsequent scope (@see NaBL#48)
    //where exp has type t (temporary disabled)
  
  VarDecl(_, Var(name)):
    defines Global name
      // in subsequent scope (@see NaBL#48)
  
  Assign(name, exp):
    defines Global name
      // of type t (temporary disabled)
    // where exp has type t (temporary disabled)
  
  Block(stmt*):
    scopes Global
  
  Labeled(name, stmt):
    defines Label name
    in stmt
  
  For(_, _, _, _):
    scopes Global
  
  Break(name):
    refers to Label name
  
  // TODO: Type(name): refers to Global name (but: built-in types?)
  
binding rules // Expressions
  
  VarRef(name):
  	refers to Global name
  