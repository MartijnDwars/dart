module expressions/Literals

imports

  Common
  Type
  Expression
  String
  lexical/Operator
  
context-free syntax

  Literal = String
  Literal = Boolean
  Literal = Number
  Literal.Symbol = <#<{ID "."}+>>
  Literal.OperatorSymbol = <#<Operator>>
  Literal.Null = "null"
  
  // Intentional duplicate constructor to allow ending comma
  Literal.List = <<CONST?> <TypeArguments?>[<{Expression ", "}*>]>
  Literal.List = <<CONST?> <TypeArguments?>[<{Expression ", "}*>, ]>
  
  // Intentional duplicate constructor to allow ending comma
  Literal.Map = <<CONST?> <TypeArguments?>{<{MapEntry ", "}*>}>
  Literal.Map = <<CONST?> <TypeArguments?>{<{MapEntry ", "}*>, }>
  
  MapEntry.MapEntry = <<Expression>: <Expression>> 
  
  Boolean.True = "true"
  Boolean.False = "false"
  
  Number.Dec = NUMBER
  Number.Hex = HEX-NUMBER