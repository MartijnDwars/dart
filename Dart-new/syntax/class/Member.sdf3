module class/Member

imports
  
  class/Initializer
  Common
  Function
  Metadata
  Parameters
  Type
  lexical/Operator

context-free syntax
  
  ClassMemberDefinition.ClassMemberDefinition = <<Metadata> <ClassMember>>
  
  ClassMember.InitializedConstructor = <<Qualified><Parameters> : <{SuperCallOrFieldInitializer ", "}+> <FunctionBody>>
  
  ClassMember.FactoryMethod = <factory <Qualified><Parameters> <FunctionBody>>
  
  // TODO: the spec uses `<Type>.<ID>` instead of `<Type>`, but this causes ambiguity because `Type = Qualified`
  ClassMember.RedirectingFactory = <<CONST?> factory <Qualified><Parameters> = <Type>;>
  
  ClassMember.OperatorMethod = <<ReturnType> operator <Operator><Parameters> <FunctionBody>>
  
  ClassMember.Method = <<STATIC?> <FunctionSignature> <FunctionBody>>
  
  ClassMember.NamedConstructor = <<STATIC?> <Metadata> <ReturnType> <ID>.<ID><Parameters> <FunctionBody>>
  
  ClassMember.Getter = <<STATIC?> <ReturnType> get <ID><FunctionBody>>
  
  ClassMember.Setter = <<STATIC?> <ReturnType> set <ID><Parameters> <FunctionBody>>
