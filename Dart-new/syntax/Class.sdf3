module Class

imports

  Common
  class/Declaration
  class/Initializer
  class/Member
  lexical/Operator
  Metadata
  Type
  Expression
  Modifier
  Statement
  Parameters
  Function
  
context-free syntax
  
  Class.Class = <<Metadata> <ABSTRACT?> class <ID> <TypeParameters?> <Parent?> <Mixins?> <Interfaces?> {
    <{ClassMemberDefinition "\n"}*>
  }>
  
  // Reject classes with a mixin and without a parent
  Class = <<Metadata> <ABSTRACT?> class <ID> <TypeParameters?> <Mixins> <Interfaces?> {
    <{ClassMemberDefinition "\n"}*>
  }> {reject}
  
  Class.MixinApplication = <<Metadata> <ABSTRACT?> class <ID> <TypeParameters?> =
  	<Type> with <{Type ", "}+> <Interfaces?>;>
  
  Parent.Parent = <extends <Type>>
  
  Mixins.Mixins = <with <{Type ", "}+>>
  
  Interfaces.Interfaces = <implements <{Type ", "}+>>
  
template options

  keyword -/- [a-zA-Z]
  tokenize: ".("
