module Statement

imports
  
  Common
  Expression
  Variable
  Argument

context-free syntax
  
  Statement.Block = <{
    <Statement+>
  }>
  
  Statement.Expression = <<Expression?>;>
  
  Statement.If = <if (<Expression>)
    <Statement>>
  
  Statement.IfElse = <if (<Expression>)
    <Statement>
  else
    <Statement>>
  
  Statement.For = <for (<Expression?>; <Expression?>; <{Expression ", "}*>)
    <Statement>>
  
  Statement.ForIn = <for (<ID> in <Expression>)
    <Statement>>
  
  Statement.While = <while (<Expression>)
    <Statement>>
  
  Statement.Do = <do <Statement> while (<Expression>);>
  
  Statement.Switch = <switch (<Expression>) {
    <SwitchCase*>
    <DefaultCase?>
  }>
  
  SwitchCase.SwitchCase = <case <Expression>: <Statement*>>
  
  DefaultCase.DefaultCase = <default: <Statement*>>
  
  Statement.Rethrow = <rethrow;>
  
  Statement.Return = <return <Expression?>;>
  
  Statement.Break = <break <ID?>;>
  
  Statement.Continue = <continue <ID?>;>
  
  Statement.Yield = <yield <Expression>;>
  
  Statement.Invoke = <<ID>(<{Argument ", "}*>);>

template options

	tokenize : ";("
  keyword -/- [a-zA-Z]
