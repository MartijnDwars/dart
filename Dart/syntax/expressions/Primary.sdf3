module expressions/Primary

imports
  
  Common
  Type
  Function
  Arguments
  Expression
  expressions/Literals
  expressions/AssignableExpression
  
context-free syntax

  Primary.This = <this>
  
  Primary.VarRef = ID
  
  Primary = Function
  
  Primary = Literal
  
  // Since <Type> may contain '.', these two are ambiguous
  Primary.NewObject = <new <Type>(<Arguments>)>
  
  Primary.NewObject = <new <Type>.<ID>(<Arguments>)> {prefer}
  
  Primary.Closurization = <new <Type>#>
  
  Primary.Closurization = <new <Type>#.<ID>>
  
  // Since <Type> may contain '.', these two are ambiguous
  Primary.ConstObject = <const <Type>(<Arguments>)>
  
  Primary.ConstObject = <const <Type>.<ID>(<Arguments>)> {prefer}
  
  Primary.SuperIndex = <super[<Expression>]>
  
  Primary.SuperField = <super.<ID>>
  
  Primary.Selector = <<Primary>.<ID>> {left}
  