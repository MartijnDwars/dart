module Expression

imports

  Variable
  Arguments
  expressions/Additive
  expressions/AssignableExpression
  expressions/Assignments
  expressions/Bitwise
  expressions/Equality
  expressions/IfNull
  expressions/Literals
  expressions/Logical
  expressions/Multiplicative
  expressions/Primary
  expressions/Relational
  expressions/Restrictions
  expressions/Shift
  expressions/Unary
  
context-free syntax
  
  Expression.Throw = <throw <Expression>>
  
  Expression = Primary
  
  Expression = <(<Expression>)> {bracket}
  
context-free priorities
  
  // Unary postfix
  {/*Expression.Property Expression.ConditionalProperty*/ Expression.PostInc Expression.PostDec /*Expression.Index Expression.Call*/}
  // Unary prefix
> {Expression.Min Expression.Neg Expression.BitNot Expression.PreInc Expression.PreDec}
  // Multiplicative
> {left: Expression.Mul Expression.Div Expression.Mod Expression.IntDiv}
  // Additive
> {left: Expression.Add Expression.Sub}
  // Shift
> {left: Expression.LShift Expression.RShift}
  // Bitwise
> {left: Expression.BitAnd Expression.BitXor Expression.BitOr}
  // Relational
> {left: Expression.Lt Expression.Gt Expression.Lte Expression.Gte Expression.As Expression.Is Expression.IsNot}
  // Equality
> {left: Expression.Eq Expression.Neq}
  // Logical
> {left: Expression.LogicAnd Expression.LogicOr Expression.IfNull}
  // Conditional
> {right: Expression.Conditional}
  // Cascade
> {left: Expression.Cascade}
  // Assignment
> {right: Expression.Assign Expression.MulAssign Expression.DivAssign Expression.IntDivAssign Expression.ModAssign Expression.AddAssign Expression.SubAssign Expression.LShiftAssign Expression.RShiftAssign Expression.BitAndAssign Expression.BitXorAssign Expression.BitOrAssign Expression.NullAssign}
