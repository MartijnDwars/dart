module Parameters

imports
  
  Common
  Expression
  Function
  Metadata
  Modifier
  Type
  
context-free syntax
  
  Parameters.Parameters = <(<{NormalFormalParameter ", "}*>)>
  Parameters.Parameters = <(<{NormalFormalParameter ", "}+>, <OptionalFormalParameters>)>
  Parameters.Parameters = <(<OptionalFormalParameters>)>
  
  NormalFormalParameter = FunctionSignature
  NormalFormalParameter = FieldFormalParameter
  NormalFormalParameter = SimpleFormalParameter
  
  FieldFormalParameter = <<Metadata> <FinalConstVarOrType?> this.<ID><Parameters?>>
  
  FinalConstVarOrType = <final <Type?>>
  FinalConstVarOrType = <const <Type?>>
  FinalConstVarOrType = <var>
  FinalConstVarOrType = <<Type>>
  
  OptionalFormalParameters.Positional = <[<{DefaultFormalParameter ", "}+>]>
  OptionalFormalParameters.Named = <{<{NamedFormalParameter ", "}+>}>
  
  SimpleFormalParameter = <<Metadata> <Modifier?> <Type?> <ID>>
  SimpleFormalParameter = <<Metadata> var <ID>>
  
  DefaultFormalParameter.Param = <<NormalFormalParameter>>
  DefaultFormalParameter.InitializedParam = <<NormalFormalParameter> = <Expression>>
  
  NamedFormalParameter.NamedParam = <<NormalFormalParameter>>
  NamedFormalParameter.NamedInitializedParam = <<NormalFormalParameter>: <Expression>>
  
template options

  tokenize : "."
