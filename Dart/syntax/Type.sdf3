module Type

imports

  Common
  Metadata
  Type
  Parameters
  
context-free syntax // Type
  
  Type.VoidType = VOID
  Type.DynamicType = DYNAMIC
  Type.Type = <<Qualified>>
  Type.Generic = <<Qualified> <TypeArguments>>
 
context-free syntax // DynType parses Îµ as Dynamic()

  DynType.Type = <<Qualified>>
  DynType.Dynamic = 
  
context-free syntax // Type arguments
  
  TypeArguments.TypeArguments = [<[{Type ","}+]>]
  
context-free syntax // Type parameters

  TypeParameters.TypeParameters = [<[{TypeParameter ", "}+]>]
  
  TypeParameter.TypeParameter = <<Metadata> <ID>>
  TypeParameter.BoundedTypeParameter = <<Metadata> <ID> extends <Type>>
  
context-free syntax // Type alias

  TypeAlias.Typealias = <<Metadata> typedef <DynType> <ID> <TypeParameters?> <Parameters>;>
  
template options

  keyword -/- [a-zA-Z]
  