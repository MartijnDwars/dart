[
   VariableDeclaration                    -- _1 _2 _3 _4,
   VariableDeclaration.2:opt              -- _1,
   VariableDeclaration.3:opt              -- _1,
   VariableDeclaration.4:iter-sep         -- _1 KW[","],
   DynamicVariableDeclaration             -- _1 KW["var"] _2,
   DynamicVariableDeclaration.2:iter-sep  -- _1 KW[","],
   Var                                    -- KW["var"],
   Variable                               -- _1,
   Variable                               -- _1 KW["="] _2,
   COMPLETION-VariableDeclaration         -- _1,
   COMPLETION-Dynamic                     -- _1,
   COMPLETION-Variable                    -- _1,
   COMPLETION-VariableDeclaration         -- _1,
   Block                                  -- V  [V vs=2 [KW["{"] _1] KW["}"]],
   Block.1:iter                           -- _1,
   Nop                                    -- KW[";"],
   Expression                             -- _1 KW[";"],
   If                                     -- KW["if"] KW["("] _1 KW[")"] _2,
   IfElse                                 -- KW["if"] KW["("] _1 KW[")"] _2 KW["else"] _3,
   For                                    -- KW["for"] KW["("] _1 KW[";"] _2 KW[";"] _3 KW[")"] _4,
   For.1:opt                              -- _1,
   For.2:opt                              -- _1,
   For.3:iter-star-sep                    -- _1 KW[","],
   ForIn                                  -- KW["for"] KW["("] _1 KW["in"] _2 KW[")"] _3,
   While                                  -- KW["while"] KW["("] _1 KW[")"] _2,
   Do                                     -- KW["do"] _1 KW["while"] KW["("] _2 KW[")"] KW[";"],
   Switch                                 -- KW["switch"] KW["("] _1 KW[")"] KW["{"] _2 _3 KW["}"],
   Switch.2:iter-star                     -- _1,
   Switch.3:opt                           -- _1,
   SwitchCase                             -- KW["case"] _1 KW[":"] _2,
   SwitchCase.2:iter-star                 -- _1,
   DefaultCase                            -- V  [H  [KW["default:"]] _1],
   DefaultCase.1:iter-star                -- _1,
   Rethrow                                -- KW["rethrow"] KW[";"],
   Return                                 -- KW["return"] _1 KW[";"],
   Return.1:opt                           -- _1,
   Break                                  -- KW["break"] _1 KW[";"],
   Break.1:opt                            -- _1,
   Continue                               -- KW["continue"] _1 KW[";"],
   Continue.1:opt                         -- _1,
   Yield                                  -- KW["yield"] _1 KW[";"],
   Assert                                 -- KW["assert"] KW["("] _1 KW[")"] KW[";"],
   COMPLETION-SwitchCase                  -- _1,
   COMPLETION-DefaultCase                 -- _1,
   COMPLETION-Statement                   -- _1,
   Parameters                             -- KW["("] _1 KW[")"],
   Parameters.1:iter-star-sep             -- _1 KW[","],
   Parameters                             -- KW["("] _1 KW[","] _2 KW[")"],
   Parameters.1:iter-sep                  -- _1 KW[","],
   Parameters                             -- KW["("] _1 KW[")"],
   Positional                             -- KW["["] _1 KW["]"],
   Positional.1:iter-sep                  -- _1 KW[","],
   Named                                  -- KW["{"] _1 KW["}"],
   Named.1:iter-sep                       -- _1 KW[","],
   Param                                  -- _1,
   InitializedParam                       -- _1 KW["="] _2,
   NamedParam                             -- _1,
   NamedInitializedParam                  -- _1 KW[":"] _2,
   COMPLETION-Parameters                  -- _1,
   COMPLETION-FieldFormalParameter        -- _1,
   COMPLETION-FinalConstVarOrType         -- _1,
   COMPLETION-OptionalFormalParameters    -- _1,
   COMPLETION-SimpleFormalParameter       -- _1,
   COMPLETION-DefaultFormalParameter      -- _1,
   COMPLETION-NamedFormalParameter        -- _1,
   Metadata                               -- _1,
   Metadata.1:iter-star                   -- _1,
   Annotation                             -- KW["@"] _1,
   ArgumentAnnotation                     -- KW["@"] _1 KW["("] _2 KW[")"],
   COMPLETION-Metadata                    -- _1,
   COMPLETION-Annotation                  -- _1,
   Import                                 -- KW["import"] _1 _2 KW[";"],
   Import.2:iter-star                     -- _1,
   AliasedImport                          -- KW["import"] _1 KW["as"] _2 _3 KW[";"],
   AliasedImport.3:iter-star              -- _1,
   DeferredImport                         -- KW["import"] _1 KW["deferred"] KW["as"] _2 _3 KW[";"],
   DeferredImport.3:iter-star             -- _1,
   Show                                   -- V  [H  [KW["show"]] _1],
   Show.1:iter-sep                        -- _1 KW[","],
   Hide                                   -- V  [H  [KW["hide"]] _1],
   Hide.1:iter-sep                        -- _1 KW[","],
   COMPLETION-Import                      -- _1,
   COMPLETION-Combinator                  -- _1,
   Function                               -- _1 _2 _3 _4 KW["{"] _5 KW["}"],
   Function.2:opt                         -- _1,
   Function.5:iter-star                   -- _1,
   ShortFunction                          -- _1 _2 _3 _4 KW["=>"] _5 KW[";"],
   ShortFunction.2:opt                    -- _1,
   FunctionSignature                      -- _1 _2 _3 _4,
   FunctionSignature.2:opt                -- _1,
   FunctionBody                           -- _1 KW["{"] _2 KW["}"],
   FunctionBody.1:opt                     -- _1,
   FunctionBody.2:iter-star               -- _1,
   ShortFunctionBody                      -- _1 KW["=>"] _2 KW[";"],
   ShortFunctionBody.1:opt                -- _1,
   Async                                  -- _1,
   Asyncs                                 -- _1 _2,
   Asyncs.2:ci-lit                        -- _1,
   Asyncs.2:ci-lit.1:"*"                  -- ,
   Syncs                                  -- _1 _2,
   Syncs.2:ci-lit                         -- _1,
   Syncs.2:ci-lit.1:"*"                   -- ,
   COMPLETION-Function                    -- _1,
   COMPLETION-FunctionSignature           -- _1,
   COMPLETION-FunctionBody                -- _1,
   This                                   -- KW["this"],
   VarRef                                 -- _1,
   NewObject                              -- KW["new"] _1 KW["("] _2 KW[")"],
   NewObject                              -- KW["new"] _1 KW["."] _2 KW["("] _3 KW[")"],
   Closurization                          -- KW["new"] _1 KW["#"],
   Closurization                          -- KW["new"] _1 KW["#."] _2,
   ConstObject                            -- KW["const"] _1 KW["("] _2 KW[")"],
   ConstObject                            -- KW["const"] _1 KW["."] _2 KW["("] _3 KW[")"],
   SuperIndex                             -- KW["super["] _1 KW["]"],
   SuperField                             -- KW["super."] _1,
   COMPLETION-Primary                     -- _1,
   Null                                   -- KW["null"],
   True                                   -- KW["true"],
   False                                  -- KW["false"],
   Number                                 -- _1,
   HexNumber                              -- _1,
   String                                 -- _1,
   Symbol                                 -- V  [H  [KW["#"]] _1],
   Symbol.1:iter-sep                      -- _1 KW["."],
   List                                   -- _1 KW["["] _2 KW["]"],
   List.1:opt                             -- _1,
   List.2:iter-star-sep                   -- _1 KW[","],
   List                                   -- _1 KW["["] _2 KW[","] KW["]"],
   List.1:opt                             -- _1,
   List.2:iter-star-sep                   -- _1 KW[","],
   TypedList                              -- _1 _2 KW["["] _3 KW["]"],
   TypedList.1:opt                        -- _1,
   TypedList.3:iter-star-sep              -- _1 KW[","],
   Map                                    -- _1 KW["{"] _2 KW["}"],
   Map.1:opt                              -- _1,
   Map.2:iter-star-sep                    -- _1 KW[","],
   Map                                    -- _1 KW["{"] _2 KW[","] KW["}"],
   Map.1:opt                              -- _1,
   Map.2:iter-star-sep                    -- _1 KW[","],
   TypedMap                               -- _1 _2 KW["{"] _3 KW["}"],
   TypedMap.1:opt                         -- _1,
   TypedMap.3:iter-star-sep               -- _1 KW[","],
   TypedMap                               -- _1 _2 KW["{"] _3 KW[","] KW["}"],
   TypedMap.1:opt                         -- _1,
   TypedMap.3:iter-star-sep               -- _1 KW[","],
   MapEntry                               -- _1 KW[":"] _2,
   COMPLETION-Literal                     -- _1,
   COMPLETION-MapEntry                    -- _1,
   Assign                                 -- _1 KW["="] _2,
   MulAssign                              -- _1 KW["*="] _2,
   DivAssign                              -- _1 KW["/="] _2,
   IntDivAssign                           -- _1 KW["~/="] _2,
   ModAssign                              -- _1 KW["%="] _2,
   AddAssign                              -- _1 KW["+="] _2,
   SubAssign                              -- _1 KW["-="] _2,
   LShiftAssign                           -- _1 KW["<<="] _2,
   RShiftAssign                           -- _1 KW[">>="] _2,
   BitAndAssign                           -- _1 KW["&="] _2,
   BitXorAssign                           -- _1 KW["^="] _2,
   BitOrAssign                            -- _1 KW["|="] _2,
   NullAssign                             -- _1 KW["??="] _2,
   IfNull                                 -- _1 KW["??"] _2,
   Conditional                            -- _1 KW["?"] _2 KW[":"] _3,
   Cascade                                -- _1 KW[".."] _2,
   LogicAnd                               -- _1 KW["&&"] _2,
   LogicOr                                -- _1 KW["||"] _2,
   Eq                                     -- _1 KW["=="] _2,
   Neq                                    -- _1 KW["!="] _2,
   Lt                                     -- _1 KW["<"] _2,
   Gt                                     -- _1 KW[">"] _2,
   Lte                                    -- _1 KW["<="] _2,
   Gte                                    -- _1 KW[">="] _2,
   As                                     -- _1 KW["as"] _2,
   Is                                     -- _1 KW["is"] _2,
   IsNot                                  -- _1 KW["is!"] _2,
   BitAnd                                 -- _1 KW["&"] _2,
   BitXor                                 -- _1 KW["^"] _2,
   BitOr                                  -- _1 KW["|"] _2,
   LShift                                 -- _1 KW["<<"] _2,
   RShift                                 -- _1 KW[">>"] _2,
   Add                                    -- _1 KW["+"] _2,
   Sub                                    -- _1 KW["-"] _2,
   Mul                                    -- _1 KW["*"] _2,
   Div                                    -- _1 KW["/"] _2,
   Mod                                    -- _1 KW["%"] _2,
   IntDiv                                 -- _1 KW["~/"] _2,
   Field                                  -- _1 KW["."] _2,
   Index                                  -- _1 KW["["] _2 KW["]"],
   ConditionalField                       -- _1 KW["?."] _2,
   SuperField                             -- KW["super."] _1,
   SuperIndex                             -- KW["super["] _1 KW["]"],
   VarRef                                 -- _1,
   COMPLETION-AssignableExpression        -- _1,
   PostInc                                -- _1 KW["++"],
   PostDec                                -- _1 KW["--"],
   Index                                  -- _1 KW["["] _2 KW["]"],
   Call                                   -- _1 KW["("] _2 KW[")"],
   Min                                    -- KW["-"] _1,
   Neg                                    -- KW["!"] _1,
   BitNot                                 -- KW["~"] _1,
   PreInc                                 -- KW["++"] _1,
   PreDec                                 -- KW["--"] _1,
   Throw                                  -- KW["throw"] _1,
   COMPLETION-Expression                  -- _1,
   Export                                 -- _1 KW["export"] _2 _3 KW[";"],
   Export.3:iter-star                     -- _1,
   Show                                   -- V  [H  [KW["show"]] _1],
   Show.1:iter-sep                        -- _1 KW[","],
   Hide                                   -- V  [H  [KW["hide"]] _1],
   Hide.1:iter-sep                        -- _1 KW[","],
   COMPLETION-Export                      -- _1,
   COMPLETION-Combinator                  -- _1,
   Enum                                   -- _1 KW["enum"] _2 KW["{"] _3 KW["}"],
   Enum.3:iter-sep                        -- _1 KW[","],
   Enum                                   -- _1 KW["enum"] _2 KW["{"] _3 KW[","] KW["}"],
   Enum.3:iter-sep                        -- _1 KW[","],
   COMPLETION-Enum                        -- _1,
   Library                                -- _1 _2 _3 _4,
   Library.1:opt                          -- _1,
   Library.2:iter-star                    -- _1,
   Library.3:iter-star                    -- _1,
   Library.4:iter                         -- _1,
   Part                                   -- _1 KW["part"] KW["of"] _2 KW[";"] _3,
   Part.3:iter-star                       -- _1,
   LibraryName                            -- _1 KW["library"] _2 KW[";"],
   PartDirective                          -- _1 KW["part"] _2 KW[";"],
   DeclarationStmt                        -- _1 KW[";"],
   COMPLETION-CompilationUnit             -- _1,
   COMPLETION-LibraryName                 -- _1,
   COMPLETION-PartDirective               -- _1,
   COMPLETION-TopDefinition               -- _1,
   Final                                  -- KW["final"],
   Const                                  -- KW["const"],
   COMPLETION-Modifier                    -- _1,
   VoidType                               -- _1,
   Type                                   -- _1,
   Generic                                -- _1 _2,
   TypeArguments                          -- KW["<"] _1 KW[">"],
   TypeArguments.1:iter-sep               -- _1 KW[","],
   TypeParameters                         -- KW["<"] _1 KW[">"],
   TypeParameters.1:iter-sep              -- _1 KW[","],
   TypeParameter                          -- _1 _2,
   BoundedTypeParameter                   -- _1 _2 KW["extends"] _3,
   COMPLETION-Type                        -- _1,
   COMPLETION-TypeArguments               -- _1,
   COMPLETION-TypeParameters              -- _1,
   COMPLETION-TypeParameter               -- _1,
   Class                                  -- _1 _2 KW["class"] _3 _4 _5 _6 _7 KW["{"] _8 KW["}"],
   Class.2:opt                            -- _1,
   Class.4:opt                            -- _1,
   Class.5:opt                            -- _1,
   Class.6:opt                            -- _1,
   Class.7:opt                            -- _1,
   Class.8:iter-star                      -- _1,
   MixinApplication                       -- _1 _2 KW["class"] _3 _4 KW["="] _5 KW["with"] _6 _7 KW[";"],
   MixinApplication.2:opt                 -- _1,
   MixinApplication.4:opt                 -- _1,
   MixinApplication.6:iter-sep            -- _1 KW[","],
   MixinApplication.7:opt                 -- _1,
   Parent                                 -- KW["extends"] _1,
   Mixins                                 -- V  [H  [KW["with"]] _1],
   Mixins.1:iter-sep                      -- _1 KW[","],
   Interfaces                             -- V  [H  [KW["implements"]] _1],
   Interfaces.1:iter-sep                  -- _1 KW[","],
   COMPLETION-Class                       -- _1,
   COMPLETION-Parent                      -- _1,
   COMPLETION-Mixins                      -- _1,
   COMPLETION-Interfaces                  -- _1,
   InitializedConstructor                 -- _1 _2 KW[":"] _3 _4,
   InitializedConstructor.3:iter-sep      -- _1 KW[","],
   ConstructorDeclaration                 -- _1 _2 _3 _4 KW[";"],
   ConstructorDeclaration.1:opt           -- _1,
   ConstructorDeclaration.4:opt           -- _1,
   FactoryMethod                          -- KW["factory"] _1 _2 _3,
   OperatorMethod                         -- _1 KW["operator"] _2 _3 _4,
   OperatorMethod.1:opt                   -- _1,
   Method                                 -- _1 _2 _3,
   Method.1:opt                           -- _1,
   Getter                                 -- _1 _2 KW["get"] _3 _4,
   Getter.1:opt                           -- _1,
   Getter.2:opt                           -- _1,
   Setter                                 -- _1 _2 KW["set"] _3 _4 _5,
   Setter.1:opt                           -- _1,
   Setter.2:opt                           -- _1,
   OperatorDeclaration                    -- _1 _2 KW["operator"] _3 _4 KW[";"],
   OperatorDeclaration.1:opt              -- _1,
   OperatorDeclaration.2:opt              -- _1,
   Redirection                            -- KW[":"] KW["this"] _1,
   RedirectionMethod                      -- KW[":"] KW["this"] KW["."] _1 _2,
   Initializer                            -- V  [H  [KW[":"]] _1],
   Initializer.1:iter-sep                 -- _1 KW[","],
   COMPLETION-ClassMember                 -- _1,
   COMPLETION-RedirectionOrInitializers   -- _1,
   COMPLETION-SuperCallOrFieldInitializer -- _1,
   COMPLETION-StaticFinalDeclaration      -- _1,
   COMPLETION-InitializedIdentifier       -- _1,
   COMPLETION-Class                       -- _1,
   ExpArguments                           -- _1,
   ExpArguments.1:iter-star-sep           -- _1 KW[", "],
   NamedArguments                         -- _1,
   NamedArguments.1:iter-star-sep         -- _1 KW[", "],
   MixedArguments                         -- _1 KW[","] _2,
   MixedArguments.1:iter-star-sep         -- _1 KW[","],
   MixedArguments.2:iter-sep              -- _1 KW[","],
   NamedArgument                          -- _1 KW[":"] _2,
   COMPLETION-Arguments                   -- _1,
   COMPLETION-NamedArgument               -- _1,
   Program                                -- _1,
   Program.1:iter-star                    -- _1
]